import copy

class Solution(object):
    def minimumTotal(self, triangle):
        mins = copy.deepcopy(triangle)

        for depth in range(1, len(triangle)):
            for width in range(0, len(triangle[depth])):
                if width == 0 and depth != 1:
                    mins[depth][width] = mins[depth-1][width] + triangle[depth][width]
                    continue
                if depth != 1 and width != len(triangle[depth]) - 1:
                    mins[depth][width] = min(mins[depth-1][width-1],mins[depth-1][width]) + triangle[depth][width]
                    continue
                if depth != 1 and width == len(triangle[depth]) - 1:
                    mins[depth][width] = mins[depth-1][width-1] + triangle[depth][width]
                    continue
                else:
                    mins[depth][width] = triangle[depth][width] + mins[0][0]
        
        return min(mins[-1])
        


        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        
triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]

print(Solution.minimumTotal(Solution,triangle))